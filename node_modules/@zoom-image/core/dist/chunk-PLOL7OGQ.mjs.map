{"version":3,"sources":["../src/cropImage.ts"],"names":["cropImage","image","positionX","positionY","currentZoom","canvas","scale","croppedImageWidth","croppedImageHeight","canvasContext","sx","sy"],"mappings":"AAOO,IAAMA,EAAY,CAAC,CAAE,MAAAC,EAAO,UAAAC,EAAW,UAAAC,EAAW,YAAAC,CAAY,IAAoB,CACvF,IAAMC,EAAS,SAAS,cAAc,QAAQ,EACxCC,EAAQL,EAAM,cAAgBA,EAAM,YAAcG,GAClDG,EAAoBN,EAAM,YAAcK,EACxCE,EAAqBP,EAAM,aAAeK,EAChDD,EAAO,MAAQE,EACfF,EAAO,OAASG,EAChB,IAAMC,EAAgBJ,EAAO,WAAW,IAAI,EAEtCK,EAAK,KAAK,IAAI,EAAG,KAAK,IAAIR,CAAS,EAAII,CAAK,EAC5CK,EAAK,KAAK,IAAI,EAAG,KAAK,IAAIR,CAAS,EAAIG,CAAK,EAElD,OAAAG,EAAc,UACZR,EACAS,EACAC,EACAJ,EACAC,EACA,EACA,EACAD,EACAC,CACF,EAEOH,EAAO,UAAU,CAC1B","sourcesContent":["type CropImageArg = {\n  currentZoom: number\n  image: HTMLImageElement\n  positionX: number\n  positionY: number\n}\n\nexport const cropImage = ({ image, positionX, positionY, currentZoom }: CropImageArg) => {\n  const canvas = document.createElement(\"canvas\")\n  const scale = image.naturalWidth / (image.clientWidth * currentZoom)\n  const croppedImageWidth = image.clientWidth * scale\n  const croppedImageHeight = image.clientHeight * scale\n  canvas.width = croppedImageWidth\n  canvas.height = croppedImageHeight\n  const canvasContext = canvas.getContext(\"2d\") as CanvasRenderingContext2D\n\n  const sx = Math.max(0, Math.abs(positionX) * scale)\n  const sy = Math.max(0, Math.abs(positionY) * scale)\n\n  canvasContext.drawImage(\n    image,\n    sx,\n    sy,\n    croppedImageWidth,\n    croppedImageHeight,\n    0,\n    0,\n    croppedImageWidth,\n    croppedImageHeight,\n  )\n\n  return canvas.toDataURL()\n}\n"]}