{"version":3,"sources":["../src/createZoomImageHover.ts"],"names":["createZoomImageHover","container","options","controller","signal","sourceImgElement","getSourceImage","zoomedImgWrapper","zoomedImg","zoomLens","finalOptions","store","f","imageCache","scaleX","scaleY","offset","getOffset","element","elRect","getLimitX","value","getLimitY","zoomLensLeft","left","minX","clamp","zoomLensTop","top","minY","setZoomedImgSize","onSourceImageReady","setup","processZoom","handlePointerEnter","handlePointerLeave","handleScroll","event","offsetX","offsetY","backgroundTop","backgroundRight","disableScroll","enableScroll","newState"],"mappings":"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","sourcesContent":["import { imageCache } from \"./store\"\nimport { createStore } from \"@namnode/store\"\nimport { ZoomedImgStatus } from \"./types\"\nimport { enableScroll, disableScroll, clamp, getSourceImage } from \"./utils\"\n\nexport type ZoomImageHoverOptions = {\n  customZoom?: { width: number; height: number }\n  zoomImageSource?: string\n  zoomLensClass?: string\n  zoomTarget?: HTMLElement\n  scaleFactor?: number\n}\n\nexport type ZoomImageHoverState = {\n  zoomedImgStatus: ZoomedImgStatus\n  enabled: boolean\n}\n\nexport type ZoomImageHoverStateUpdate = { enabled: boolean }\n\ntype RequiredExcept<T, K extends keyof T> = Omit<Required<T>, K> & {\n  [P in K]?: T[P]\n}\n\nexport function createZoomImageHover(container: HTMLElement, options: ZoomImageHoverOptions = {}) {\n  const controller = new AbortController()\n  const { signal } = controller\n  const sourceImgElement = getSourceImage(container)\n  const zoomedImgWrapper = document.createElement(\"div\")\n  zoomedImgWrapper.style.overflow = \"hidden\"\n  const zoomedImg = zoomedImgWrapper.appendChild(document.createElement(\"img\"))\n  zoomedImg.style.maxWidth = \"none\"\n  const zoomLens = container.appendChild(document.createElement(\"div\"))\n\n  const finalOptions: RequiredExcept<ZoomImageHoverOptions, \"zoomTarget\" | \"customZoom\"> = {\n    zoomImageSource: options.zoomImageSource || sourceImgElement.src,\n    zoomLensClass: options.zoomLensClass || \"\",\n    customZoom: options.customZoom,\n    scaleFactor: options.scaleFactor || 1,\n    zoomTarget: options.zoomTarget,\n  }\n\n  const store = createStore<ZoomImageHoverState>({\n    zoomedImgStatus: imageCache.checkImageLoaded(finalOptions.zoomImageSource) ? \"loaded\" : \"idle\",\n    enabled: true,\n  })\n\n  let scaleX: number\n  let scaleY: number\n  let offset: { left: number; top: number }\n\n  function getOffset(element: HTMLElement) {\n    const elRect = element.getBoundingClientRect()\n    return { left: elRect.left, top: elRect.top }\n  }\n\n  function getLimitX(value: number) {\n    return sourceImgElement.width - value\n  }\n\n  function getLimitY(value: number) {\n    return sourceImgElement.height - value\n  }\n\n  function zoomLensLeft(left: number) {\n    const minX = zoomLens.clientWidth / 2\n    return clamp(left, minX, getLimitX(minX)) - minX\n  }\n\n  function zoomLensTop(top: number) {\n    const minY = zoomLens.clientHeight / 2\n    return clamp(top, minY, getLimitY(minY)) - minY\n  }\n\n  function setZoomedImgSize() {\n    // Custom zoom available\n    if (finalOptions.customZoom) {\n      zoomedImgWrapper.style.width = finalOptions.customZoom.width + \"px\"\n      zoomedImgWrapper.style.height = finalOptions.customZoom.height + \"px\"\n      return\n    }\n\n    // Default zoom to source image size\n    zoomedImgWrapper.style.width = sourceImgElement.width + \"px\"\n    zoomedImgWrapper.style.height = sourceImgElement.height + \"px\"\n  }\n\n  function onSourceImageReady() {\n    setZoomedImgSize()\n    offset = getOffset(sourceImgElement)\n    // Calculate scale and offset\n    scaleX = sourceImgElement.naturalWidth / sourceImgElement.width\n    scaleY = sourceImgElement.naturalHeight / sourceImgElement.height\n\n    zoomedImg.style.display = \"block\"\n    zoomedImg.style.display = \"none\"\n\n    // Setup default zoom lens style\n    zoomLens.style.position = \"absolute\"\n\n    if (!finalOptions.zoomLensClass) {\n      zoomLens.style.background = \"rgba(238, 130, 238, 0.5)\"\n    }\n\n    if (finalOptions.customZoom) {\n      zoomLens.style.width = (finalOptions.customZoom.width / scaleX) * finalOptions.scaleFactor + \"px\"\n      zoomLens.style.height = (finalOptions.customZoom.height / scaleY) * finalOptions.scaleFactor + \"px\"\n      return\n    }\n\n    zoomLens.style.width = sourceImgElement.clientWidth / scaleX + \"px\"\n    zoomLens.style.height = sourceImgElement.clientHeight / scaleY + \"px\"\n  }\n\n  function setup() {\n    zoomLens.style.display = \"none\"\n\n    if (finalOptions.zoomLensClass) {\n      zoomLens.classList.add(finalOptions.zoomLensClass)\n    }\n\n    // setup event listeners\n    container.addEventListener(\"pointerdown\", processZoom, { signal })\n    container.addEventListener(\"pointermove\", processZoom, { signal })\n    container.addEventListener(\"pointerenter\", handlePointerEnter, { signal })\n    container.addEventListener(\"pointerleave\", handlePointerLeave, { signal })\n    window.addEventListener(\"scroll\", handleScroll, { signal })\n\n    // Setup zoomed image position if zoom target is specified\n    if (finalOptions.zoomTarget) {\n      finalOptions.zoomTarget.appendChild(zoomedImgWrapper)\n      return\n    }\n\n    container.appendChild(zoomedImgWrapper)\n    zoomedImg.style.position = \"absolute\"\n    zoomedImg.style.top = \"0px\"\n    zoomedImg.style.right = \"0px\"\n    zoomedImg.style.transform = \"translateX(100%)\"\n  }\n\n  function processZoom(event: PointerEvent) {\n    let offsetX: number\n    let offsetY: number\n    let backgroundTop: number\n    let backgroundRight: number\n    // let backgroundPosition: string\n    if (offset) {\n      offsetX = zoomLensLeft(event.clientX - offset.left)\n      offsetY = zoomLensTop(event.clientY - offset.top)\n      backgroundTop = (offsetX * scaleX) / finalOptions.scaleFactor\n      backgroundRight = (offsetY * scaleY) / finalOptions.scaleFactor\n      zoomedImg.style.transform = \"translate(\" + -backgroundTop + \"px,\" + -backgroundRight + \"px)\"\n      zoomLens.style.cssText += \"transform:\" + \"translate(\" + offsetX + \"px,\" + offsetY + \"px); top: 0; left: 0;\"\n    }\n  }\n\n  async function handlePointerEnter() {\n    imageCache.createZoomImage({\n      img: zoomedImg,\n      src: finalOptions.zoomImageSource,\n      store,\n    })\n\n    disableScroll()\n    zoomedImg.style.display = \"block\"\n    zoomLens.style.display = \"block\"\n  }\n\n  function handlePointerLeave() {\n    enableScroll()\n    zoomedImg.style.display = \"none\"\n    zoomLens.style.display = \"none\"\n  }\n\n  function handleScroll() {\n    offset = getOffset(sourceImgElement)\n  }\n\n  if (sourceImgElement.complete) {\n    onSourceImageReady()\n  } else {\n    sourceImgElement.onload = onSourceImageReady\n  }\n\n  setup()\n\n  return {\n    cleanup: () => {\n      controller.abort()\n      container.removeChild(zoomLens)\n\n      if (finalOptions.zoomTarget) {\n        finalOptions.zoomTarget.removeChild(zoomedImgWrapper)\n        return\n      }\n\n      container.removeChild(zoomedImgWrapper)\n    },\n    subscribe: store.subscribe,\n    getState: store.getState,\n    setState: (newState: ZoomImageHoverStateUpdate) => {\n      store.setState(newState)\n    },\n  }\n}\n"]}