{"version":3,"sources":["../src/utils.ts","../src/makeCalculateZoom.ts"],"names":["scaleLinear","domainStart","domainStop","rangeStart","rangeStop","value","makeCalculateZoom","maxZoom"],"mappings":"AAgEO,IAAMA,EACX,CAAC,CACC,YAAAC,EACA,WAAAC,EACA,WAAAC,EACA,UAAAC,CACF,IAMCC,GACCF,GAAcC,EAAYD,KAAgBE,EAAQJ,IAAgBC,EAAaD,IC3E5E,IAAMK,EAAqBC,GAChCP,EAAY,CACV,YAAa,EACb,WAAY,IACZ,WAAY,EACZ,UAAWO,CACb,CAAC","sourcesContent":["export function clamp(value: number, min: number, max: number) {\n  return Math.max(min, Math.min(max, value))\n}\n\nfunction preventDefault(event: Event) {\n  event.preventDefault()\n}\n\nconst keySet = new Set([\"ArrowUp\", \"ArrowRight\", \"ArrowDown\", \"ArrowLeft\"])\nfunction preventDefaultForScrollKeys(event: KeyboardEvent) {\n  if (keySet.has(event.key)) {\n    preventDefault(event)\n    return false\n  }\n}\n\nlet controller: AbortController | undefined\n\nexport function disableScroll() {\n  controller = new AbortController()\n  const { signal } = controller\n  window.addEventListener(\"DOMMouseScroll\", preventDefault, { signal })\n  window.addEventListener(\"wheel\", preventDefault, { passive: false, signal })\n  window.addEventListener(\"touchmove\", preventDefault, { passive: false, signal })\n  window.addEventListener(\"keydown\", preventDefaultForScrollKeys, { signal })\n}\n\nexport function enableScroll() {\n  controller?.abort()\n}\n\nexport function getSourceImage(container: HTMLElement) {\n  if (!container) {\n    throw new Error(\"Please specify a container for the zoom image\")\n  }\n\n  const sourceImgElement = container.querySelector(\"img\")\n  if (!sourceImgElement) {\n    throw new Error(\"Please place an image inside the container\")\n  }\n\n  return sourceImgElement\n}\n\nexport type PointerPosition = {\n  x: number\n  y: number\n}\n\nexport function getPointersCenter(first: PointerPosition, second: PointerPosition) {\n  return {\n    x: (first.x + second.x) / 2,\n    y: (first.y + second.y) / 2,\n  }\n}\n\nexport function makeMaybeCallFunction<T>(predicateFn: () => boolean, fn: (arg: T) => void) {\n  return (arg: T) => {\n    if (predicateFn()) {\n      fn(arg)\n    }\n  }\n}\n\nexport const scaleLinear =\n  ({\n    domainStart,\n    domainStop,\n    rangeStart,\n    rangeStop,\n  }: {\n    domainStart: number\n    domainStop: number\n    rangeStart: number\n    rangeStop: number\n  }) =>\n  (value: number) =>\n    rangeStart + (rangeStop - rangeStart) * ((value - domainStart) / (domainStop - domainStart))\n","import { scaleLinear } from \"./utils\"\n\nexport const makeCalculateZoom = (maxZoom: number) =>\n  scaleLinear({\n    domainStart: 0,\n    domainStop: 100,\n    rangeStart: 1,\n    rangeStop: maxZoom,\n  })\n"]}