{"version":3,"sources":["../src/store.ts"],"names":["makeImageCache","loadedImageSet","checkImageLoaded","src","store","img","imageCache"],"mappings":"AAEO,IAAMA,EAAiB,IAAM,CAClC,IAAMC,EAAiB,IAAI,IAErBC,EAAoBC,GAAgBF,EAAe,IAAIE,CAAG,EA2BhE,MAAO,CACL,gBA1BsB,CAAC,CACvB,IAAAA,EACA,MAAAC,EACA,IAAAC,CACF,IAIM,CACJA,EAAI,IAAMF,EACN,CAAAD,EAAiBC,CAAG,IAExBF,EAAe,IAAIE,CAAG,EAEtBC,EAAM,SAAS,CAAE,gBAAiB,SAAU,CAAC,EAE7CC,EAAI,iBAAiB,OAAQ,IAAM,CACjCD,EAAM,SAAS,CAAE,gBAAiB,QAAS,CAAC,CAC9C,CAAC,EAEDC,EAAI,iBAAiB,QAAS,IAAM,CAClCD,EAAM,SAAS,CAAE,gBAAiB,OAAQ,CAAC,CAC7C,CAAC,EACH,EAIE,iBAAAF,CACF,CACF,EAEaI,EAAaN,EAAe","sourcesContent":["import { createStore } from \"@namnode/store\"\n\nexport const makeImageCache = () => {\n  const loadedImageSet = new Set<string>()\n\n  const checkImageLoaded = (src: string) => loadedImageSet.has(src)\n\n  const createZoomImage = ({\n    src,\n    store,\n    img,\n  }: {\n    src: string\n    store: ReturnType<typeof createStore>\n    img: HTMLImageElement\n  }) => {\n    img.src = src\n    if (checkImageLoaded(src)) return\n\n    loadedImageSet.add(src)\n\n    store.setState({ zoomedImgStatus: \"loading\" })\n\n    img.addEventListener(\"load\", () => {\n      store.setState({ zoomedImgStatus: \"loaded\" })\n    })\n\n    img.addEventListener(\"error\", () => {\n      store.setState({ zoomedImgStatus: \"error\" })\n    })\n  }\n\n  return {\n    createZoomImage,\n    checkImageLoaded,\n  }\n}\n\nexport const imageCache = makeImageCache()\n"]}