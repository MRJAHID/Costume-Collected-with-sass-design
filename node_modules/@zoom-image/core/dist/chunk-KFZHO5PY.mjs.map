{"version":3,"sources":["../src/createZoomImageClick.ts"],"names":["createZoomImageClick","container","options","sourceImgElement","getSourceImage","finalOptions","isOnMove","store","f","imageCache","zoomedImgWidth","zoomedImgHeight","zoomedImg","handlePointerMove","event","processZoom","calculatePositionX","newPositionX","width","calculatePositionY","newPositionY","height","containerRect","zoomPointX","zoomPointY","currentPositionX","currentPositionY","handlePointerDown","controller","signal","disableScroll","enableScroll"],"mappings":"yIAcO,SAASA,EAAqBC,EAAwBC,EAAiC,CAAC,EAAG,CAChG,IAAMC,EAAmBC,EAAeH,CAAS,EAC3CI,EAAgD,CACpD,WAAYH,EAAQ,YAAc,EAClC,gBAAiBA,EAAQ,iBAAmBC,EAAiB,GAC/D,EAEIG,EAAW,GAETC,EAAQC,EAAiC,CAC7C,gBAAiBC,EAAW,iBAAiBJ,EAAa,eAAe,EAAI,SAAW,MAC1F,CAAC,EAEKK,EAAiBP,EAAiB,YAAcE,EAAa,WAC7DM,EAAkBR,EAAiB,aAAeE,EAAa,WAC/DO,EAAYX,EAAU,YAAY,SAAS,cAAc,KAAK,CAAC,EACrEW,EAAU,MAAM,SAAW,OAC3BA,EAAU,MAAM,MAAQ,GAAGF,MAC3BE,EAAU,MAAM,OAAS,GAAGD,MAC5BC,EAAU,MAAM,SAAW,WAC3BA,EAAU,MAAM,IAAM,IACtBA,EAAU,MAAM,KAAO,IAEvB,SAASC,EAAkBC,EAAqB,CACzCR,GAILS,EAAYD,CAAK,CACnB,CAEA,IAAME,EAAsBC,GAAyB,CACnD,IAAMC,EAAQjB,EAAU,YACxB,OAAIgB,EAAe,EAAU,EACzBA,EAAeC,EAAQb,EAAa,WAAaa,EAAc,CAACA,GAASb,EAAa,WAAa,GAChGY,CACT,EAEME,EAAsBC,GAAyB,CACnD,IAAMC,EAASpB,EAAU,aACzB,OAAImB,EAAe,EAAU,EACzBA,EAAeC,EAAShB,EAAa,WAAagB,EAAe,CAACA,GAAUhB,EAAa,WAAa,GACnGe,CACT,EAEA,SAASL,EAAYD,EAAqB,CACxCF,EAAU,MAAM,QAAU,QAC1BH,EAAW,gBAAgB,CACzB,IAAKG,EACL,IAAKP,EAAa,gBAClB,MAAAE,CACF,CAAC,EAED,IAAMe,EAAgBrB,EAAU,sBAAsB,EAChDsB,EAAaT,EAAM,QAAUQ,EAAc,KAC3CE,EAAaV,EAAM,QAAUQ,EAAc,IAE3CG,EAAmBT,EAAmB,CAACO,EAAalB,EAAa,WAAakB,CAAU,EACxFG,EAAmBP,EAAmB,CAACK,EAAanB,EAAa,WAAamB,CAAU,EAE9FZ,EAAU,MAAM,UAAY,aAAaa,QAAuBC,MAClE,CAEA,SAASC,EAAkBb,EAAqB,CAC9C,GAAIR,EAAU,CACZA,EAAW,GACXM,EAAU,MAAM,QAAU,OAC1B,OAGFG,EAAYD,CAAK,EACjBR,EAAW,EACb,CAEA,IAAMsB,EAAa,IAAI,gBACjB,CAAE,OAAAC,CAAO,EAAID,EACnB,OAAA3B,EAAU,iBAAiB,cAAe0B,EAAmB,CAAE,OAAAE,CAAO,CAAC,EACvE5B,EAAU,iBAAiB,eAAgB6B,EAAe,CAAE,OAAAD,CAAO,CAAC,EACpE5B,EAAU,iBAAiB,eAAgB8B,EAAc,CAAE,OAAAF,CAAO,CAAC,EACnE5B,EAAU,iBAAiB,cAAeY,EAAmB,CAAE,OAAAgB,CAAO,CAAC,EAEhE,CACL,QAAS,IAAM,CACbD,EAAW,MAAM,EACjB3B,EAAU,YAAYW,CAAS,EAC/BL,EAAM,QAAQ,CAChB,EACA,UAAWA,EAAM,UACjB,SAAUA,EAAM,QAClB,CACF","sourcesContent":["import { imageCache } from \"./store\"\nimport { createStore } from \"@namnode/store\"\nimport { ZoomedImgStatus } from \"./types\"\nimport { disableScroll, enableScroll, getSourceImage } from \"./utils\"\n\nexport type ZoomImageClickOptions = {\n  zoomFactor?: number\n  zoomImageSource?: string\n}\n\nexport type ZoomImageClickState = {\n  zoomedImgStatus: ZoomedImgStatus\n}\n\nexport function createZoomImageClick(container: HTMLElement, options: ZoomImageClickOptions = {}) {\n  const sourceImgElement = getSourceImage(container)\n  const finalOptions: Required<ZoomImageClickOptions> = {\n    zoomFactor: options.zoomFactor ?? 4,\n    zoomImageSource: options.zoomImageSource ?? sourceImgElement.src,\n  }\n\n  let isOnMove = false\n\n  const store = createStore<ZoomImageClickState>({\n    zoomedImgStatus: imageCache.checkImageLoaded(finalOptions.zoomImageSource) ? \"loaded\" : \"idle\",\n  })\n\n  const zoomedImgWidth = sourceImgElement.clientWidth * finalOptions.zoomFactor\n  const zoomedImgHeight = sourceImgElement.clientHeight * finalOptions.zoomFactor\n  const zoomedImg = container.appendChild(document.createElement(\"img\"))\n  zoomedImg.style.maxWidth = \"none\"\n  zoomedImg.style.width = `${zoomedImgWidth}px`\n  zoomedImg.style.height = `${zoomedImgHeight}px`\n  zoomedImg.style.position = \"absolute\"\n  zoomedImg.style.top = \"0\"\n  zoomedImg.style.left = \"0\"\n\n  function handlePointerMove(event: PointerEvent) {\n    if (!isOnMove) {\n      return\n    }\n\n    processZoom(event)\n  }\n\n  const calculatePositionX = (newPositionX: number) => {\n    const width = container.clientWidth\n    if (newPositionX > 0) return 0\n    if (newPositionX + width * finalOptions.zoomFactor < width) return -width * (finalOptions.zoomFactor - 1)\n    return newPositionX\n  }\n\n  const calculatePositionY = (newPositionY: number) => {\n    const height = container.clientHeight\n    if (newPositionY > 0) return 0\n    if (newPositionY + height * finalOptions.zoomFactor < height) return -height * (finalOptions.zoomFactor - 1)\n    return newPositionY\n  }\n\n  function processZoom(event: PointerEvent) {\n    zoomedImg.style.display = \"block\"\n    imageCache.createZoomImage({\n      img: zoomedImg,\n      src: finalOptions.zoomImageSource,\n      store,\n    })\n\n    const containerRect = container.getBoundingClientRect()\n    const zoomPointX = event.clientX - containerRect.left\n    const zoomPointY = event.clientY - containerRect.top\n\n    const currentPositionX = calculatePositionX(-zoomPointX * finalOptions.zoomFactor + zoomPointX)\n    const currentPositionY = calculatePositionY(-zoomPointY * finalOptions.zoomFactor + zoomPointY)\n\n    zoomedImg.style.transform = `translate(${currentPositionX}px, ${currentPositionY}px)`\n  }\n\n  function handlePointerDown(event: PointerEvent) {\n    if (isOnMove) {\n      isOnMove = false\n      zoomedImg.style.display = \"none\"\n      return\n    }\n\n    processZoom(event)\n    isOnMove = true\n  }\n\n  const controller = new AbortController()\n  const { signal } = controller\n  container.addEventListener(\"pointerdown\", handlePointerDown, { signal })\n  container.addEventListener(\"pointerenter\", disableScroll, { signal })\n  container.addEventListener(\"pointerleave\", enableScroll, { signal })\n  container.addEventListener(\"pointermove\", handlePointerMove, { signal })\n\n  return {\n    cleanup: () => {\n      controller.abort()\n      container.removeChild(zoomedImg)\n      store.cleanup()\n    },\n    subscribe: store.subscribe,\n    getState: store.getState,\n  }\n}\n"]}