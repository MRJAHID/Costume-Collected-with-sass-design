{"version":3,"sources":["../src/createZoomImageMove.ts"],"names":["createZoomImageMove","container","options","sourceImgElement","getSourceImage","finalOptions","store","f","imageCache","zoomedImgWidth","zoomedImgHeight","zoomedImg","handlePointerEnter","event","processZoom","disableScroll","handlePointerMove","handlePointerLeave","enableScroll","calculatePositionX","newPositionX","width","calculatePositionY","newPositionY","height","containerRect","zoomPointX","zoomPointY","currentPositionX","currentPositionY","controller","signal"],"mappings":"yIAcO,SAASA,EAAoBC,EAAwBC,EAAgC,CAAC,EAAG,CAC9F,IAAMC,EAAmBC,EAAeH,CAAS,EAC3CI,EAA+C,CACnD,WAAYH,EAAQ,YAAc,EAClC,gBAAiBA,EAAQ,iBAAmBC,EAAiB,GAC/D,EAEMG,EAAQC,EAAgC,CAC5C,gBAAiBC,EAAW,iBAAiBH,EAAa,eAAe,EAAI,SAAW,MAC1F,CAAC,EAEKI,EAAiBN,EAAiB,YAAcE,EAAa,WAC7DK,EAAkBP,EAAiB,aAAeE,EAAa,WAC/DM,EAAYV,EAAU,YAAY,SAAS,cAAc,KAAK,CAAC,EACrEU,EAAU,MAAM,SAAW,OAC3BA,EAAU,MAAM,MAAQ,GAAGF,MAC3BE,EAAU,MAAM,OAAS,GAAGD,MAC5BC,EAAU,MAAM,SAAW,WAC3BA,EAAU,MAAM,IAAM,IACtBA,EAAU,MAAM,KAAO,IAEvB,SAASC,EAAmBC,EAAqB,CAC/CF,EAAU,MAAM,QAAU,QAC1BH,EAAW,gBAAgB,CACzB,IAAKG,EACL,IAAKN,EAAa,gBAClB,MAAAC,CACF,CAAC,EAEDQ,EAAYD,CAAK,EACjBE,EAAc,CAChB,CAEA,SAASC,EAAkBH,EAAqB,CAC9CC,EAAYD,CAAK,CACnB,CAEA,SAASI,GAAqB,CAC5BC,EAAa,EACbP,EAAU,MAAM,QAAU,OAC1BA,EAAU,MAAM,UAAY,MAC9B,CAEA,IAAMQ,EAAsBC,GAAyB,CACnD,IAAMC,EAAQpB,EAAU,YACxB,OAAImB,EAAe,EAAU,EACzBA,EAAeC,EAAQhB,EAAa,WAAagB,EAAc,CAACA,GAAShB,EAAa,WAAa,GAChGe,CACT,EAEME,EAAsBC,GAAyB,CACnD,IAAMC,EAASvB,EAAU,aACzB,OAAIsB,EAAe,EAAU,EACzBA,EAAeC,EAASnB,EAAa,WAAamB,EAAe,CAACA,GAAUnB,EAAa,WAAa,GACnGkB,CACT,EAEA,SAAST,EAAYD,EAAqB,CACxCF,EAAU,MAAM,QAAU,QAC1BH,EAAW,gBAAgB,CACzB,IAAKG,EACL,IAAKN,EAAa,gBAClB,MAAAC,CACF,CAAC,EAED,IAAMmB,EAAgBxB,EAAU,sBAAsB,EAChDyB,EAAab,EAAM,QAAUY,EAAc,KAC3CE,EAAad,EAAM,QAAUY,EAAc,IAE3CG,EAAmBT,EAAmB,CAACO,EAAarB,EAAa,WAAaqB,CAAU,EACxFG,EAAmBP,EAAmB,CAACK,EAAatB,EAAa,WAAasB,CAAU,EAC9FhB,EAAU,MAAM,UAAY,aAAaiB,QAAuBC,MAClE,CAEA,IAAMC,EAAa,IAAI,gBACjB,CAAE,OAAAC,CAAO,EAAID,EACnB,OAAA7B,EAAU,iBAAiB,eAAgBW,EAAoB,CAAE,OAAAmB,CAAO,CAAC,EACzE9B,EAAU,iBAAiB,cAAee,EAAmB,CAAE,OAAAe,CAAO,CAAC,EACvE9B,EAAU,iBAAiB,eAAgBgB,EAAoB,CAAE,OAAAc,CAAO,CAAC,EAElE,CACL,QAAS,IAAM,CACbD,EAAW,MAAM,EACjB7B,EAAU,YAAYU,CAAS,EAC/BL,EAAM,QAAQ,CAChB,EACA,UAAWA,EAAM,UACjB,SAAUA,EAAM,QAClB,CACF","sourcesContent":["import { imageCache } from \"./store\"\nimport { createStore } from \"@namnode/store\"\nimport { ZoomedImgStatus } from \"./types\"\nimport { disableScroll, enableScroll, getSourceImage } from \"./utils\"\n\nexport type ZoomImageMoveOptions = {\n  zoomFactor?: number\n  zoomImageSource?: string\n}\n\nexport type ZoomImageMoveState = {\n  zoomedImgStatus: ZoomedImgStatus\n}\n\nexport function createZoomImageMove(container: HTMLElement, options: ZoomImageMoveOptions = {}) {\n  const sourceImgElement = getSourceImage(container)\n  const finalOptions: Required<ZoomImageMoveOptions> = {\n    zoomFactor: options.zoomFactor ?? 4,\n    zoomImageSource: options.zoomImageSource ?? sourceImgElement.src,\n  }\n\n  const store = createStore<ZoomImageMoveState>({\n    zoomedImgStatus: imageCache.checkImageLoaded(finalOptions.zoomImageSource) ? \"loaded\" : \"idle\",\n  })\n\n  const zoomedImgWidth = sourceImgElement.clientWidth * finalOptions.zoomFactor\n  const zoomedImgHeight = sourceImgElement.clientHeight * finalOptions.zoomFactor\n  const zoomedImg = container.appendChild(document.createElement(\"img\"))\n  zoomedImg.style.maxWidth = \"none\"\n  zoomedImg.style.width = `${zoomedImgWidth}px`\n  zoomedImg.style.height = `${zoomedImgHeight}px`\n  zoomedImg.style.position = \"absolute\"\n  zoomedImg.style.top = \"0\"\n  zoomedImg.style.left = \"0\"\n\n  function handlePointerEnter(event: PointerEvent) {\n    zoomedImg.style.display = \"block\"\n    imageCache.createZoomImage({\n      img: zoomedImg,\n      src: finalOptions.zoomImageSource,\n      store,\n    })\n\n    processZoom(event)\n    disableScroll()\n  }\n\n  function handlePointerMove(event: PointerEvent) {\n    processZoom(event)\n  }\n\n  function handlePointerLeave() {\n    enableScroll()\n    zoomedImg.style.display = \"none\"\n    zoomedImg.style.transform = \"none\"\n  }\n\n  const calculatePositionX = (newPositionX: number) => {\n    const width = container.clientWidth\n    if (newPositionX > 0) return 0\n    if (newPositionX + width * finalOptions.zoomFactor < width) return -width * (finalOptions.zoomFactor - 1)\n    return newPositionX\n  }\n\n  const calculatePositionY = (newPositionY: number) => {\n    const height = container.clientHeight\n    if (newPositionY > 0) return 0\n    if (newPositionY + height * finalOptions.zoomFactor < height) return -height * (finalOptions.zoomFactor - 1)\n    return newPositionY\n  }\n\n  function processZoom(event: PointerEvent) {\n    zoomedImg.style.display = \"block\"\n    imageCache.createZoomImage({\n      img: zoomedImg,\n      src: finalOptions.zoomImageSource,\n      store,\n    })\n\n    const containerRect = container.getBoundingClientRect()\n    const zoomPointX = event.clientX - containerRect.left\n    const zoomPointY = event.clientY - containerRect.top\n\n    const currentPositionX = calculatePositionX(-zoomPointX * finalOptions.zoomFactor + zoomPointX)\n    const currentPositionY = calculatePositionY(-zoomPointY * finalOptions.zoomFactor + zoomPointY)\n    zoomedImg.style.transform = `translate(${currentPositionX}px, ${currentPositionY}px)`\n  }\n\n  const controller = new AbortController()\n  const { signal } = controller\n  container.addEventListener(\"pointerenter\", handlePointerEnter, { signal })\n  container.addEventListener(\"pointermove\", handlePointerMove, { signal })\n  container.addEventListener(\"pointerleave\", handlePointerLeave, { signal })\n\n  return {\n    cleanup: () => {\n      controller.abort()\n      container.removeChild(zoomedImg)\n      store.cleanup()\n    },\n    subscribe: store.subscribe,\n    getState: store.getState,\n  }\n}\n"]}